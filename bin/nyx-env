#!/usr/bin/env bash

help_msg() {
    cat << EOF
Usage:
  nyx-env [command]

Commands for nyx:
  setup     Install nyx dotfiles & nix packages

Commands for nix packages:
  clean     Clean up nix store
  install   Install nyx-all packages
  list      List nix packages
  status    Show some metrics about nix installation
  update    Update nix channels 

EOF
}

oops() {
    echo "$0:" "$@" >&2
    exit 1
}

## Command - install ##
nyx_setup() {
    # bootstrap nyx
    if [[ -r $HOME/.nyx/etc/bashrc ]]; then
        . $HOME/.nyx/etc/bashrc
    else
        oops "File $HOME/.nyx/etc/bashrc is not readable"
    fi

    echo "=> create nyx directories"    
    mkdir -p $NYX_LOCAL/bin
    ls -1ld $NYX_LOCAL/bin

    link_dotfile() { # $1 = link, $2 = file
        rm -f $1 && ln -s $2 $1
        ls -1l $1
    }

    echo "=> create links for bash setup"
    link_dotfile "$HOME/.bashrc" "$NYX_HOME/etc/bashrc"
    link_dotfile "$HOME/.bash_profile" "$NYX_HOME/etc/bash_profile"
    if [[ $(uname -s) == "Darwin" ]]; then
        touch $HOME/.bash_sessions_disable 
        ls -1l $HOME/.bash_sessions_disable
    fi

    echo "=> create links for python setup"
    link_dotfile "$HOME/.pip" "$NYX_HOME/etc/pip"

    echo "=> create links for git setup"
    link_dotfile "$HOME/.gitconfig" "$NYX_HOME/etc/gitconfig"

    echo "=> create links for nixpkgs setup"
    link_dotfile "$HOME/.nixpkgs" "$NYX_HOME/nixpkgs"

    echo "=> install nyx-all packages"
    nyx_nix_install
}

## Command - clean ##
nyx_nix_clean() {
    echo "nix-collect-garbage -d"
    nix-collect-garbage -d
}

## Command - install ##
nyx_nix_install() {
    echo "nix-env -i nyx-all"
    nix-env -i nyx-all
}

## Command - list ##
nyx_nix_list() {
    declare -A PACKAGES
    root_path=$(nix-env -q --out-path nyx-all | awk '{print $2;exit}')
    for pkg_path in $(nix-store -q --references $root_path)
    do
        pkg_name=$(IFS='-'; read -r pkg_hash pkg_name <<< $pkg_path; IFS=' ';echo $pkg_name)
        echo $pkg_name
        if [[ $pkg_name == nyx-* ]]; then
            for pkg_child_path in $(nix-store -q --references $pkg_path)
            do
                pkg_child_name=$(IFS='-'; read -r pkg_hash pkg_name <<< $pkg_child_path; IFS=' ';echo $pkg_name)
                echo "  $pkg_child_name"
            done            
        fi
    done
}

## Command - status ##
nyx_nix_status() {
    nix_version=$(nix-env --version | awk '{print $3'})
    nix_nixpkgs=$(nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version' 2>/dev/null | tr -d '"')
    nix_store_size=$(du -hs /nix/store | awk '{print $1}')
    nix_derivations=$(ls -1 /nix/store | wc -l | awk '{print $1}')
    nix_gen_default=$(nix-env --list-generations | wc -l | tr -d ' ')
    nix_gen_webserver=$(nix-env -p $NIX_USER_PROFILE_DIR/webserver --list-generations 2>/dev/null | wc -l | tr -d ' ')
    cat <<EOF
Nix version               : $nix_version
Nixpkgs version (system)  : $nix_nixpkgs
Nix store size            : $nix_store_size
Number of Nix derivations : $nix_derivations
Number of generations
  - default profile       : $nix_gen_default
  - profile webserver     : $nix_gen_webserver
EOF
}

## Command - update ##
nyx_nix_update() {
    echo "nix-channel --update"
    nix-channel --update
}

## Command - update ##

## Main ##
case $1 in
    clean) nyx_nix_clean;;
    setup) nyx_setup;;
    install) nyx_nix_install;;
    list) nyx_nix_list;;
    status) nyx_nix_status;;
    update) nyx_nix_update;;
    *) help_msg && exit 1;;
esac

